<?php

include_once(sfConfig::get('sf_symfony_lib_dir') . '/helper/FormHelper.php');

/**
 * Returns a <select> tag populated with all the available brushes in the sfSyntaxHighlighterPlugin
 *
 * The select_programming_language_tag builds off the traditional select_tag function, and is conveniently populated with
 * all the syntax highlighting brushes available (sorted alphabetically). Each option in the list has an alias
 * code for its value and the programming language's name as its display title.  The brushes data is retrieved via the sfSyntaxHighlighterToolkit
 * class, which stores the full list of available programming languages
 * Here's an example of an <option> tag generated by the select_programming_language_tag:
 *
 * <samp>
 *  <option value="as3">ActionScript 3.0</option>
 * </samp>
 *
 * <b>Examples:</b>
 * <code>
 *  echo select_programming_language_tag('programming language', 'php');
 * </code>
 *
 * @param  string field name
 * @param  string selected field value (alias for a programming language; see plugin docs)
 * @param  array  additional HTML compliant <select> tag parameters
 * @return string <select> tag populated with all the countries in the world.
 * @see select_tag, options_for_select, sfSyntaxHighlighterToolkit
 */
function select_programming_language_tag($name, $selected = null, $options = array())
{
	$languages = ulGeshiToolkit::getAvailableLanguages();

	if ($language_option = _get_option($options, 'languages'))
	{
		foreach ($languages as $key => $value)
		{
			if (!in_array($key, $language_option))
			{
				unset($languages[$key]);
			}
		}
	}

	asort($languages);

	$option_tags = options_for_select($languages, $selected, $options);
	unset($options['include_blank'], $options['include_custom']);

	return select_tag($name, $option_tags, $options);
}

function dynamicContextUrl($context)
{
	//$url = url_for($context->getModuleName().'/'.$context->getActionName(), true);
	$url = currentPageURL();
	$url = str_replace("http://", "", $url);

	$urlParts = array();
	$urlParts = explode('/', $url);

	$finalUrl = "<span>";
	$reconstructedUrl = "http:/";
	$level = 0;
	foreach($urlParts as $urlPart)
	{
		if($urlPart != "")
		{
			$reconstructedUrl .= '/' .$urlPart;
			$finalUrl .= link_to(substr(urldecode($urlPart), 0, 20), $reconstructedUrl, array('class' => 'urlLevel-'.$level)) . '/<span>';
			$level++;
		}
	}
	$finalUrl = trim($finalUrl, " &raquo;");
	for($i = $level; $i >= 0; $i--)
	{
		$finalUrl .= "</span>";
	}

	return trim($finalUrl, " &raquo;");
}

function currentPageURL()
{
	$pageURL = 'http';
	if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on") {$pageURL .= "s";}
	$pageURL .= "://";
	if ($_SERVER["SERVER_PORT"] != "80") {
		$pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
	} else {
		$pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
	}
	return $pageURL;
	
	/*
	 * @todo estilo symfony:
	 * 
	 * $url = 'http'.($request->isSecure() ? 's' : '').'://'.$request->getHost();
	 */
}

function includeWidget($widgetName, $flashVars = "", $otherOptions = array())
{
	$otherOptions['widgetName'] = $widgetName;
	$otherOptions['flashVars'] = $flashVars;
	include_component('widget', 'widget', $otherOptions);
}